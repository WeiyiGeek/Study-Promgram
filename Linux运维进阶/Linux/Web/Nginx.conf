
#[Main] Nginx启动的用户(建议非root用户)
user nginx;

#[Main] NGINX工作进程数设置值和CPU核心数一致(优化选项)
#采用 grep ^processor /proc/cpuinfo | wc -l 进行查看或者auto
worker_processes  auto;

#[Main] 工作模式与连接数上限即每个工作进程可以处理并发的最大连接数(优化选项)
events {
    #[Main-events] nginx作为反向代理服务器单个进程最大连接数（最大连接数=连接数*进程数）
    #建议与worker_rlimit_nofile一致
    worker_connections  65535;
    #[Main-events] use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; 
    #epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。
    use epoll;
    #[Main-events] 提高性能和吞吐量
    accept_mutex off;
}

#[Main] 高并发参数(通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗)(优化选项)
worker_cpu_affinity 0001 0010 0100 1000; #四核的时候
#假如是8 cpu 分配如下: worker_cpu_affinity 00000001 00000010 00000100 00001000 0001000000100000 01000000 10000000

#[Main] 默认是没有设置，可以限制为操作系统最大的限制65535。(优化选项)
worker_rlimit_nofile 65535

#[Main]日志位置和日志级别[ debug | info | notice | warn | error | crit ]
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
error_log logs/error.log  error;

#服务进程启动文件
pid /var/run/nginx.pid;

#当前主配置文件包含其他的nginx模块配置文件
include /etc/nginx/conf.d/*.conf; 

#[Main部分] http服务器提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。
http {
    #文件扩展名与文件类型映射表
    include       mime.types;
    #默认文件类型
    default_type  text/html;
    #响应的编码格式
    charset UTF-8;
    #服务器名字的hash表大小
    server_names_hash_bucket_size   128;
    #缓冲区代理缓冲用户端请求的最大字节数， 
    client_body_buffer_size 128k
    #上传文件大小限制
    client_header_buffer_size 4k;
    #允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值
    client_max_body_size 10m

    #文件访问缓存设置与系统文件描述符设置一致
    open_file_cache max=65536  inactive=60s;
    open_file_cache_valid      80s;
    open_file_cache_min_uses   1;

    large_client_header_buffers 4 64k; #设定请求缓

    #nginx日志记录格式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';

    #使用缓冲而不是每条日志记录都单独执行写操作，NGINX会缓冲一连串的日志记录使用单个操作把它们一起写到文件中。
    access_log  logs/access.log  main buffer=1024 flush=60s;

    #关闭server信息头响应
    server_tokens off;


    #[MAIN-http]开启高效文件传输模式,指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换(与accept_mutex关联配置)
    #对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。
    #系统调用可以实现从一个文件描述符到另一个文件描述符的数据拷贝，通常实现零拷贝，这能加速TCP数据传输
    #当配置环境下有sendfile指令和激活内容更改过滤器的指令时NGINX会自动禁用sendfile。#(优化选项)
    sendfile        on; 
    #防止网络阻塞,不过要包涵在keepalived参数才有效
    tcp_nopush on; 
    tcp_nodelay on; 

    #空闲长连接保持打开状态的时间(优化选项)
    #长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传120s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。
    keepalive_timeout  120;
    
    #用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间客户端没有任何活动，Nginx将会关闭连接
    #send_timeout  180s
    
    ###模块http_gzip#####
    #开启gzip压缩输出，减少网络传输。
    gzip  on;
    #最小压缩文件大小(注意不能小于1k)
    gzip_min_length 1k;
    #压缩缓冲区
    gzip_buffers 4 64k;
    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
    gzip_http_version 1.1;
    #压缩等级
    gzip_comp_level 2;
    ##压缩类型，默认就已经包含text/html，
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    
    ###模块fastcgi#####
    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。
    # fastcgi_temp_path  /tmp/fastcgi_temp;
    # fastcgi_cache_path /tmp/fastcgi_cache levels=1:2 keys_zone=cache_fastcgi:128m inactive=30m max_size=1g;
    # fastcgi_cache_key  $host$request_uri;
    #指定的Http状态码指定缓存时间
    # fastcgi_cache_valid 200 302 1h; 
    # fastcgi_cache_valid 301 1d;
    # fastcgi_cache_valid any 1m;
    # fastcgi_cache_min_uses 1;
    # fastcgi_cache_use_stale error timeout http_500 http_503 invalid_header;
    #指定链接到后端FastCGI的超时时间。
    # fastcgi_connect_timeout 300;
    #向FastCGI传送请求的超时时间，这个值是指已经完成两次握手后向FastCGI传送请求的超时时间。
    # fastcgi_send_timeout 300;
    #指定接收FastCGI应答的超时时间，这个值是指已经完成两次握手后接收FastCGI应答的超时时间。
    # fastcgi_read_timeout 300;
    #指定读取FastCGI应答第一部分需要用多大的缓冲区，这个值表示将使用1个64KB的缓冲区读取应答的第一部分（应答头），可以设置为gastcgi_buffers选项指定的缓冲区大小。
    # fastcgi_buffer_size 64k;
    #一个php脚本所产生的页面大小为256KB，那么会分配4个64KB的缓冲区来缓存
    # fastcgi_buffers 4 64k; 
    #建议设置为fastcgi_buffer的两倍，繁忙时候的buffer
    # fastcgi_busy_buffers_size 128k;
    # fastcgi_temp_file_write_size 128k;

    
    #[Main-http]配置虚拟主机设置
    #http服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置
    server {
        #[Main-http-server] ngnix监听端口
        listen       80;
        
        #服务器名：虚拟主机的域名可以写多个域名，可以通过正则匹配。
        server_name  localhost;

        #实现访问http时自动跳转到https
        return 301 https://$host$request_uri;
        #access_log  logs/host.access.log  main;

        #请求正则匹配的来判断访问路径，默认访问localhost:80 访问的是下面这个路径的网页
        location / {
            #站点根目录你网站文件存放的地方
            root   html;
            #定义路径下默认访问的文件名，一般跟着root放
            index  index.html index.htm;
            
            #开启限制IP连接数的时候需要使用
            #limit_zone crawler $binary_remote_addr 10m; 

            #访问控制模块默认就会安装，而且写法也非常简单，可以分别有多个allow,deny，允许或禁止某个ip或ip段访问，
            #依次满足任何一个规则就停止往下匹配 (安全选项)
            allow 192.168.10.100;
            allow 172.29.73.0/24;
            deny all;
            
            #认证访问 通过httpd-devel 工具的 htpasswd 来为访问的路径设置登录密码 (安全选项)
            #比如：htpasswd -c nginx.htpasswd admin 生成了默认使用CRYPT加密的密码文件#
            auth_basic "Nginx Status"
            auth_basic_user_file /usr/local/nginx/nginx.passwd
            
            #列出目录 autoindex Nginx默认是不允许列出整个目录的合适下载服务器。(非常不推荐)
            #如需此功能，打开nginx.conf文件，在location，server 或 http段中加入autoindex on;
            #autoindex on
            #显示出文件的确切大小单位是bytes。改为off后显示出文件的大概大小，单位是kB或者MB或者GB
            #autoindex_exact_size off
            #默认为off，显示的文件时间为GMT时间。改为on后，显示的文件时间为文件的服务器时间
            #autoindex_localtime on;
        }
        
        #error_page  404              /404.html;
        #将服务器错误页面直接指向静态页面/50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        #代理PHP脚本到Apache上监听127.0.0.1:80 末尾以php或者php5结尾的
        #location ~ \.(php|php5)?$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        #将PHP脚本传递到正在监听127.0.0.1:9000的FastCGI服务器
        #location ~ .+\.(php|php5)$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_pass   unix:/tmp/php.sock;  #为了安全推荐方式
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #    fastcgi_cache  cache_fastcgi;
        #}


        # 如果Apache的文档根目录与nginx的根目录一致，则拒绝访问.htaccess文件
        #location ~ /\.ht {
        #    deny  all;
        #}
        
        #静态资源正则请求路径匹配
        location ~ .+\.(gif|jpg|jpeg|png|bmp|swf|txt|csv|doc|docx|xls|xlsx|ppt|pptx|flv)$ {  
          root  e:wwwroot; 
          expires 30d;  #缓存有效期30天
          access_log off; #访问记录
        } 
        #JS和CSS缓存时间设置
        location ~ .+\.(js|css|html|xml)$ { expires 30d;}

        #访问控制也可以加入认证
        location /nginx-status{
            #nginx中的stub_status模块主要用于查看Nginx的一些状态信息. 本模块默认没有安装需要编译安装。
            stub_status on;
            allow 192.168.1.0/24;
            allow 127.0.0.1;
            deny all;
        }
    }
    
    #### Nginx反向代理 ######
    #[Main-http] upstream模块设置反向代理和负载均衡的连接的内部web应用服务IP端口
    upstream monitor_server {
        #seesion记录访问的主机，比如第一次访问该服务器后就记录，之后再访问都是该服务器了-进行了绑定
        ip_hash;
        #内网的应用服务,weigth参数表示权值越高被分配到的几率越大。
        #max_fails当有max_fails个请求失败，就表示后端的服务器不可用，默认为1将其设置为0可以关闭检查 
        #fail_timeout 在以后的fail_timeout时间内nginx不会再把请求发往已检查出标记为不可用的服务器 
        server 192.168.0.131:80 weight=9 max_fails=5 fail_timeout=600s;  
        server 192.168.0.132:80 weight=1 max_fails=5 fail_timeout=600s;
    } 
    
    
    #server指令配置项
    server { 
        listen 81; 
        #请求响应的域名
        server_name nagios.xxx123.tk; 
        
        location / {
          ##### 模块http_proxy：##### 反向代理主要配置
          #即反向代理，对应upstream负载均衡器
          proxy_pass http://monitor_server;
          
          #代理服务器相关信息头设置
          proxy_redirect off;
          #如果是有涉及redirect的服务，一定要加上端口8081，否则默认tomcat在redirect时候默认找80端口 
          proxy_set_header Host $host;
          #转发请求的原IP地址，程序中通过request.getHeader("Proxy-Client-IP")获得ip 
          proxy_set_header X-Real-IP $remote_addr;
          #端的Web服务器可以通过X-Forwarded-For获取用户真实IP
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
          
          ##nginx跟后端服务器连接超时时间(代理连接超时)
          #模块http_proxy代理超时设置
          proxy_connect_timeout 60s;  
          
          ##nginx跟后端服务器连接超时时间(代理连接超时) 
          proxy_read_timeout 60s;     
          
          #后端服务器数据回传时间(代理发送超时) 间
          proxy_send_timeout 30s;
          
          #设置代理服务器（nginx）从后端realserver读取并保存用户头信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点
          proxy_buffer_size 4k
          #proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的响应，网页平均在32k以下的
          proxy_buffers 4 32k
          
          #高负荷下缓冲大小（proxy_buffers*2）
          proxy_busy_buffers_size 64k
          
          #当proxy_buffers放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M
          #它与proxy_cache没有关系。大于这个值，将从upstream服务器传回。设置为0禁用。
          proxy_max_temp_file_size 0
          
          #当缓存被代理的服务器响应到临时文件时，限制每次写临时文件的大小。proxy_temp_path（可以在编译的时候）指定写到哪那个目录。
          proxy_temp_file_write_size 64k

          #把cookie的作用域替换成我们的域名。
          #proxy_cookie_domain google.com.hk www.example.com;  
          #proxy_set_header Host "www.google.com.hk";          #设置反向代理得header请求头
          #proxy_redirect http://www.google.com.hk/ ;          #重定向
          #sub_filter www.google.com.hk www.example.com;       #把谷歌的域名替换成自己的，注意需要安装nginx的sub_filter模块
          #反向代理的配置. END
        }

        #本地动静分离反向代理配置
        #所有jsp的页面均交由tomcat或resin处理
        location ~ .(jsp|jspx|do)?$ {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://127.0.0.1:8080;
        }

        #所有静态文件由nginx直接读取不经过tomcat或resin
        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$
        { expires 15d; }

        location ~ .*.(js|css)?$
        { expires 1h; }

    } 
    

    # 另一个虚拟主机，混合使用IP、名称和基于端口的配置
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server /SSL 设置 
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers ALL:!EXP:!NULL:!ADH:!LOW:!SSLv2:!MD5:!RC4;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
}