<resin xmlns="http://caucho.com/ns/resin" xmlns:resin="http://caucho.com/ns/resin/core">
 
  <!-- adds all .jar files under the resin/lib directory （加载 resin/lib 下的所有.jar文件） -->
  <class-loader>
    <tree-loader path="${resin.home}/ext-lib"/>
    <tree-loader path="${resin.root}/ext-lib"/>
    <tree-loader path="${resin.home}/lib"/>
    <tree-loader path="${resin.root}/lib"/>
  </class-loader>
<span id="more-321"></span>
  <!--Management configuration Remote management requires at least one enabled admin user.(管理配置,需要一个管理员用户)-->
  <management path="${resin.root}/admin">
    <user name="admin" password="password" disable="true"/>
    <resin:if test="${resin.professional}">
      <deploy-service/>
      <jmx-service/>
      <log-service/>
      <xa-log-service/>
    </resin:if>
  </management>
 
  <!--Logging configuration for the JDK logging API.(JDK日志配置)-->
    <!-- 'info' for production 'fine' or 'finer' for development and troubleshooting (日志信息级别：info生产环境 fine和finer适合开发环境和调试环境)-->

  <log name="" level="info" path="stdout:" timestamp="[%H:%M:%S.%s] {%{thread}} "/>
  <logger name="com.caucho" level="info"/>
  <logger name="com.caucho.java" level="config"/>
  <logger name="com.caucho.loader" level="config"/>
 
  <!--For production sites, change dependency-check-interval to something like 600s, so it only checks for updates every 10 minutes.(环境依赖检查时间，生产系统设置长点，600s 10分钟)-->
  <dependency-check-interval>2s</dependency-check-interval>
 
  <!-- SMTP server for sending mail notifications （SMTP服务器配置）-->
  <system-property mail.smtp.host="127.0.0.1"/>
  <system-property mail.smtp.port="25"/>
 
  <!-- Sets the default character encoding to utf-8 <character-encoding>utf-8</character-encoding> (默认字符集为 utf-8 ) -->
 
  <!-- You can change the compiler to "javac", "eclipse" or "internal".(你可以把编译器改成 javac、eclipse 或 internal)-->
  <javac compiler="internal" args="-source 1.5"/>
 
  <!-- Security providers. <security-provider> com.sun.net.ssl.internal.ssl.Provider </security-provider> (SSL 安全)-->
 
  <!-- Uncomment to use Resin's XML implementations
     - <system-property javax.xml.parsers.DocumentBuilderFactory
     -                 ="com.caucho.xml.parsers.XmlDocumentBuilderFactory"/>
     - <system-property javax.xml.parsers.SAXParserFactory
     -                 ="com.caucho.xml.parsers.XmlSAXParserFactory"/>
    (去掉注视，可以使用resin提供的xml应用)
     -->
 
  <cluster id="app-tier">
    <!-- sets the content root for the cluster, relative to server.root  (设置集群的根目录)-->
    <root-directory>.</root-directory>
 
    <server-default>
      <!-- The http port (http服务的端口)-->
      <http address="*" port="8080"/>
 
      <!-- SSL port configuration:
         - <http address="*" port="8443">
         -   <openssl>
         -     <certificate-file>keys/gryffindor.crt</certificate-file>
         -     <certificate-key-file>keys/gryffindor.key</certificate-key-file>
         -     <password>test123</password>
         -   </openssl>
         - </http>  (SSL配置)
        -->
 
      <!-- The JVM arguments (JVM参数设置)-->
      <jvm-arg>-Xmx256m</jvm-arg>
      <jvm-arg>-Xss1m</jvm-arg>
      <jvm-arg>-Xdebug</jvm-arg>
      <jvm-arg>-Dcom.sun.management.jmxremote</jvm-arg>
 
      <!-- Uncomment to enable admin heap dumps  (去掉注释 你可以自己管理内存堆)
 - <jvm-arg>-agentlib:resin</jvm-arg> -->
 
      <!-- arguments for the watchdog process (配置watchdog)-->
      <watchdog-jvm-arg>-Dcom.sun.management.jmxremote</watchdog-jvm-arg>
      <watchdog-port>6600</watchdog-port>
 
      <!-- Configures the minimum free memory allowed before Resin will force a restart.（配置resin强制重启时的最小空闲内存）-->
      <memory-free-min>1M</memory-free-min>
 
      <!-- Maximum number of threads.(最大线程数量) -->
      <thread-max>256</thread-max>
 
      <!-- Configures the socket timeout (套接字超时时间) -->
      <socket-timeout>65s</socket-timeout>
 
      <!-- Configures the keepalive (keepalive 的最大链接数和keepalive的超时时间)-->
      <keepalive-max>128</keepalive-max>
      <keepalive-timeout>15s</keepalive-timeout>
 
      <!--
         - If starting bin/resin as root on Unix, specify the user name
         - and group name for the web server user.(使用unix系统时 启动resin的用户和组)
         - <user-name>resin</user-name>
         - <group-name>resin</group-name>
        -->
 
    </server-default>
 
    <!-- define the servers in the cluster  (定义集群服务器)-->
    <server id="" address="127.0.0.1" port="6800"/>
 
    <!-- Configures the persistent store for single-server or clustered in Resin professional.(配置独立或集群的持久化存储，专业版功能) -->
    <resin:if test="${resin.professional}">
      <persistent-store type="cluster">
        <init path="session"/>
      </persistent-store>
    </resin:if>
 
    <!-- For security, use a different cookie for SSL sessions.(为了安全 你可以为SSL会话定义一个不同的cookie)
       - <ssl-session-cookie>SSL_JSESSIONID</ssl-session-cookie>
      -->
 
    <!-- Enables the cache (available in Resin Professional) (缓存功能启用， Professional功能)-->
    <resin:if test="${resin.professional}">
      <cache path="cache" memory-size="64M">
        <!-- Vary header rewriting for IE -->
        <rewrite-vary-as-private/>
      </cache>
    </resin:if>
 
    <!-- Enables periodic checking of the server status and check for deadlocks.. All servers can add <url>s to be checked. (可以定期检查服务器的状态和死锁检查..所有服务器都可以添加的<url> s的检查  Professional功能 )-->
    <resin:if test="${resin.professional}">
      <ping>
        <!-- <url>http://localhost:8080/test-ping.jsp</url> -->
      </ping>
    </resin:if>
 
    <!-- Defaults applied to each web-app.(默认web程序)-->
    <web-app-default>
      <prologue>
        <!-- Extension library for common jar files.  The ext is safe
           - even for non-classloader aware jars.  The loaded classes
           - will be loaded separately for each web-app, i.e. the class
           - itself will be distinct. (扩展库的公共jar文件，扩展是安全的即使没有类装载器知道的jars，装载的类将为每个应用分别装载，也就是这些类都是不同的)
           -->
        <class-loader>
          <tree-loader path="${resin.root}/ext-webapp-lib"/>
        </class-loader>
 
        <!-- Enable EL expressions in Servlet and Filter init-param ()-->
        <allow-servlet-el/>
      </prologue>
 
      <!-- Sets timeout values for cacheable pages, e.g. static pages (设置缓存、静态页面的数值。)-->
      <cache-mapping url-pattern="/" expires="5s"/>
      <cache-mapping url-pattern="*.gif" expires="60s"/>
      <cache-mapping url-pattern="*.jpg" expires="60s"/>
      <cache-mapping url-pattern="*.png" expires="60s"/>
 
      <!-- for security, disable session URLs by default. (安全的原因，默认禁用了会话的URL) -->
      <session-config>
        <enable-url-rewriting>false</enable-url-rewriting>
      </session-config>
 
      <!-- For security, set the HttpOnly flag in cookies.(安全原因，在cokkies中设置 HttpOnly标记 防止跨站攻击)
         - <cookie-http-only/>
        -->
 
      <!-- Some JSP packages have incorrect .tld files.  It's possible to set validate-taglib-schema to false to work around these packages. (一些JSP包有不正确的。TLD文件。它可以设置validate-taglib-schema为false来变通解决这些包。使其可以正常工作) -->
        <jsp>
          <validate-taglib-schema>true</validate-taglib-schema>
          <fast-jstl>true</fast-jstl>
        </jsp>
    </web-app-default>
 
    <!-- includes the app-default for default web-app behavior (导入用于默认网络应用程序的行为违约) -->
    <resin:import path="${resin.home}/conf/app-default.xml"/>
 
    <!-- Sample database pool configuration The JDBC name is java:comp/env/jdbc/test (简单的数据池配置)
         <database>
           <jndi-name>jdbc/mysql</jndi-name>
           <driver type="org.gjt.mm.mysql.Driver">
             <url>jdbc:mysql://localhost:3306/test</url>
             <user></user>
             <password></password>
            </driver>
            <prepared-statement-cache-size>8</prepared-statement-cache-size>
            <max-connections>20</max-connections>
            <max-idle-time>30s</max-idle-time>
          </database>
      -->
 
    <!-- Default host configuration applied to all virtual hosts.(定义所有虚拟主机的默认配置) -->
    <host-default>
      <!-- With another web server, like Apache, this can be commented out because the web server will log this information.(如果和别的 web服务器整合，这个可以被去掉，因为web服务器也可以记录这些信息)-->
      <access-log path="logs/access.log"
            format='%h %l %u %t "%r" %s %b "%{Referer}i" "%{User-Agent}i"'
            rollover-period="1W"/>
 
      <!-- creates the webapps directory for .war expansion  (.war文件的目录)-->
      <web-app-deploy path="webapps"/>
 
      <!-- creates the deploy directory for .ear expansion (.ear文件的目录)-->
      <ear-deploy path="deploy">
        <ear-default>
          <ejb-server>
            <config-directory>WEB-INF</config-directory>
          </ejb-server>
        </ear-default>
      </ear-deploy>
 
      <!-- creates the deploy directory for .rar expansion (.rar文件目录)-->
      <resource-deploy path="deploy"/>
    </host-default>
 
    <!-- configures a deployment directory for virtual hosts (虚拟主机的目录)-->
    <host-deploy path="hosts">
      <host-default>
        <resin:import path="host.xml" optional="true"/>
      </host-default>
    </host-deploy>
 
    <!-- configures the default host, matching any host name (默认虚拟主机配置)-->
    <host id="" root-directory=".">
      <!-- configures an explicit root web-app matching the webapp's ROOT (默认的虚拟主机配置) -->
      <web-app id="/" root-directory="webapps/ROOT"/>
      <web-app id="/resin-admin" root-directory="${resin.home}/php/admin">
        <!-- Administration application /resin-admin (管理应用程序 /resin-admin) -->
        <prologue>
          <resin:set var="resin_admin_external" value="false"/>
          <resin:set var="resin_admin_insecure" value="true"/>
        </prologue>
      </web-app>
    </host>
  </cluster>
 
  <!-- Configuration for the web-tier/load-balancer (配置为Web层/负载平衡器)-->
  <resin:if test="${resin.professional}">
    <cluster id="web-tier">
      <server-default>
        <!-- The http port -->
        <http address="*" port="9080"/>
      </server-default>
      <server id="web-a" address="127.0.0.1" port="6700"/>
      <cache path="cache" memory-size="64M"/>
      <host id="">
        <web-app id="/">
 
           <rewrite-dispatch>
             <load-balance regexp="" cluster="app-tier"/>
           </rewrite-dispatch>
 
        </web-app>
      </host>
    </cluster>
  </resin:if>
</resin>

<!--- ############################ -->
resin.conf配置文件说明[Resin3.1下的]

1.<http host='localhost' port='80'/>
   host参数指定的是服务器，port指定的是http端口，默认是localhost和8080。
2. <web-app>标签
   该标签表示一个web应用,标签中，id属性表示该应用的Web路径。
    如<web-app id='/test'>，表示该应用在Web上访问的时候应该用http://hostname/test/来访问。
    app-dir属性表示该应用的实际路径。如
    <app-dir>d:\resin\doc\test</app-dir>表示该应用在d:\resin\ doc\test目录下面。默认值为根下面的和id同名的目录。
3.Resin可以配置3种error-page：
    404错误也就是文件找不到错误页；
    Exception违例页；
    不能连接java引擎页。

    他们分别可以这样子设置:
 
  　　404文件找不到页
  　　<web-app id='/app1'>
  　　　<error-page error-code='404' location='/file_not_found.jsp'/>
  　　</web-app>
 
  　　Exception 违例页
  　　<web-app id='/foo'>
  　　　<error-page exception-type='java.lang.NullPointerException' location='/nullpointer.jsp'/>
  　　</web-app>
 
  　　不能连接到srun Servlet引擎错误页
 
  　　该页设置和应用无关，属于服务器的设置。
  　　<http-server>
  　　　<error-page exception-type='connection' location='/missing_file.html'/>
  　　</http-server>
 
  　　参见下面的语句：
  　　<classpath id='WEB-INF/classes' source='WEB-INF/src' compile='true'/>
 
  　　id参数的值表示classpath中编译后的class的存放路径；
      source参数的值表示classpath中java源代码的存放路径；
      compile中的值可能是true或者false，表示是否由Resin的srun自动编译java源代码。
      Classpath的设置一般和javaBean或者Servlet的使用有关。
      id的值表示javaBean的编译好的包存放的根，
      source的值表示javaBean的java源代码存放的根。
      Servlet相同。
6.  Servlet的设置
      <servlet-mapping url-pattern='*.xtp' servlet-name='xtp'/>
  　　<servlet-mapping url-pattern='*.jsp' servlet-name='jsp'/>
  　　<servlet-mapping url-pattern='/servlet/*' servlet-name='invoker'/>
  　　一般就是指定那些需要通过srun的解析。比如在这里，把*.jsp改成*.jss，其他不变，那么只要在访问时遇到*.jss的文件就和原来遇到*.jsp一样处理。通过这个可以指定解析的引擎，
    如以下的配置：
  　　<servlet-mapping url-pattern='*.xtp' servlet-name='com.caucho.jsp.XtpServlet'/>
  　　在Servlet中，也可以指定servlet。如
  　　<servlet servlet-name='hello' servlet-class='test.HelloWorld'/>
  　　<servlet-mapping url-pattern='/hello.html' servlet-name='hello'/>
  　　在servlet-mapping中有个重要的参数case-sensitive 如果在windows上，最好配置成false，忽略大小写，从而和windows的约定一致。
7.  Session的配置
      <session-config>
  　　<session-max>4096</session-max>
  　　<session-timeout>30</session-timeout>
  　　<enable-cookies>true</enable-cookies>
  　　<enable-url-rewriting>true</enable-url-rewriting>
  　　<file-store>WEB-INF/sessions</file-store>
  　　</session-config>
 
  　　session-max ：最大 session数量
  　　session-timeout ：session过期时间，以分钟为单位。
   　　是否允许cookie ：指session是否采用cookies。如果采用cookies，浏览器必须支持session才能使用，发布时建议改成false。enable- url-rewriting和enable-cookies一般配合使用。如果enable-cookies是false，
  　　enable-url-rewriting应该设成true比较合适。
   　　file-store ：该配置指示服务器是否把session作为文件存放在服务器上。如果把该项注释掉，则在你的web-app目录下的WEB-Inf/sessions目录不保存序列化后的session对象。Session还有jdbc-store配置，对应着把session通过jdbc永久保存在数据库中。其实也就是会话变量的序列化后的保存和重新载入的物理实现。

resin3.1.6配置文件resin.conf如下：
<resin xmlns="http://caucho.com/ns/resin" xmlns:resin="http://caucho.com/ns/resin/core">
<!-- 加载resin/lib下的所有.jar文件-->
<class-loader>
  <tree-loader path="${resin.home}/lib"/>
  <tree-loader path="${resin.root}/lib"/>
</class-loader>


<!-- - 管理配置 -->
<management path="${resin.root}/admin"></management>


<!-- -JDK日志接口的配置. 日志信息的级别：'info' 生产环境 'fine' 开发环境 'finer' 调试环境 -->
<log name="" level="fine" path="stdout:" timestamp="[%H:%M:%S.%s] "/>
<logger name="com.caucho" level="info"/>
<logger name="com.caucho.java" level="config"/>
<logger name="com.caucho.loader" level="config"/>

<!-- - 环境上下文的检测时间，对于生产站点, 这个要设置长一点，例如600秒，10分钟 -->
<dependency-check-interval>2s</dependency-check-interval>

<!-- - 发送邮件通知的SMTP服务器 -->
<system-property mail.smtp.host="127.0.0.1"/>
<system-property mail.smtp.port="25"/>

<!-- - 你可以把编译器改成 "javac", "eclipse" 或者 "internal". -->
<javac compiler="internal" args="-source 1.5"/>

<!-- Security providers.
- <security-provider>
- com.sun.net.ssl.internal.ssl.Provider
- </security-provider>
-->

<!-- 去掉注释，如果你使用resin提供的xml应用
- <system-property javax.xml.parsers.DocumentBuilderFactory
- ="com.caucho.xml.parsers.XmlDocumentBuilderFactory"/>
- <system-property javax.xml.parsers.SAXParserFactory
- ="com.caucho.xml.parsers.XmlSAXParserFactory"/>
-->

<cluster id="app-tier">
<!-- 设置集群上下文的根, 相对于server.root -->
<root-directory>.</root-directory>
<server-default>
<!-- HTTP服务的端口-->
<http address="*" port="8080"/>
<!--
- SSL端口配置:
-
- <http address="*" port="8443">
- <openssl>
- <certificate-file>keys/gryffindor.crt</certificate-file>
- <certificate-key-file>keys/gryffindor.key</certificate-key-file>
- <password>test123</password>
- </openssl>
- </http>
-->

<!-- - JVM参数设置 -->
<jvm-arg>-Xmx256m</jvm-arg>
<jvm-arg>-Xss1m</jvm-arg>
<jvm-arg>-Xdebug</jvm-arg>
<jvm-arg>-Dcom.sun.management.jmxremote</jvm-arg>
<!-- Uncomment to enable admin heap dumps 去掉这个如果你想管理内存堆的倾倒
- <jvm-arg>-agentlib:resin</jvm-arg>
-->
<watchdog-arg>-Dcom.sun.management.jmxremote</watchdog-arg>
<memory-free-min>1M</memory-free-min><!-- 强制resin重起时的最小空闲内存 -->
<thread-max>256</thread-max><!-- 最大线程数量. -->
<socket-timeout>65s</socket-timeout><!-- 套接字等待时间 -->
<keepalive-max>128</keepalive-max><!-- 配置 keepalive -->
<keepalive-timeout>15s</keepalive-timeout>
</server-default>

<!-- 定义群集服务器 -->
<server id="" address="127.0.0.1" port="6800"/>
<!-- Configures the persistent store for single-server or clustered 配置独立服务器或者群集的持久化存储，专业版的功能 -->
<resin:if test="${resin.isProfessional()}">
<persistent-store type="cluster">
<init path="session"/>
</persistent-store>
</resin:if>

<!-- 为了安全, 你可以为SSL会话(SSL sessions)定义一个不同的cookie.
- <ssl-session-cookie>SSL_JSESSIONID</ssl-session-cookie>
-->

<!-- 缓存启用 (专业版的功能) -->
<resin:if test="${isResinProfessional}">
<cache path="cache" memory-size="64M">
<!-- Vary header rewriting for IE -->
<rewrite-vary-as-private/>
</cache>
</resin:if>

<!-- 启用周期性的服务器状态检查和死锁检查，所有的服务器可以添加 <url> 来检查。 -->
<resin:if test="${isResinProfessional}">
<ping>
<!-- <url>http://localhost:8080/test-ping.jsp</url> -->
</ping>
</resin:if>

<!-- 包含web应用的默认行为 -->
<resin:import path="${resin.home}/conf/app-default.xml"/>
<!-- 每一个web应用的默认参数 -->
<<SPAN class=hilite1>web-app-default</SPAN>>
<!-- 扩展库的公共jar文件，扩展是安全的即使没有类装载器知道的jars，装载的类将为每个应用分别装载，也就是这些类都是不同的-->

<class-loader>
<tree-loader path="${server.root}/ext-webapp"/>
</class-loader>

<!-- 设置缓存页、静态也的延时值 -->
<cache-mapping url-pattern="/" expires="5s"/>
<cache-mapping url-pattern="*.gif" expires="60s"/>
<cache-mapping url-pattern="*.jpg" expires="60s"/>
<cache-mapping url-pattern="*.png" expires="60s"/>
<!-- 启用EL表达式 -->
<allow-servlet-el/>

<!-- 安全原因, 默认禁用了会话的URLs -->
<session-config>
<enable-url-rewriting>false</enable-url-rewriting>
</session-config>

<!-- 安全原因, 在cookies中设置HttpOnly标志
- <cookie-http-only/>
-->

<!--一些JSP包有不正确的 .tld文件。可以把validate-taglib-schema设置成false,可能继续正常工作
- Some JSP packages have incorrect .tld files. It's possible to set validate-taglib-schema to false to work around these
packages.
-->

<jsp>
<validate-taglib-schema>true</validate-taglib-schema>
<fast-jstl>true</fast-jstl>
<fast-jsf>true</fast-jsf>
</jsp>
</<SPAN class=hilite1>web-app-default</SPAN>>

<!-- 简单的数据池配置[The JDBC name is java:comp/env/jdbc/mysql]-->
<database>
<jndi-name>jdbc/mysql</jndi-name>
<driver type="org.gjt.mm.mysql.Driver">
<url>jdbc:mysql://localhost:3306/test</url>
<user></user>
<password></password>
</driver>
<prepared-statement-cache-size>8</prepared-statement-cache-size>
<max-connections>20</max-connections>
<max-idle-time>30s</max-idle-time>
</database>


<!-- 定义所有虚拟主机的默认配置 -->
<host-default>
<!-- 如果和别的web服务器整合，这个可以被去掉，因为web服务器也可以记录这些信息。 -->
<access-log path="logs/access.log" format='%h %l %u %t "%r" %s %b "%{Referer}i" "%{User-Agent}i"' rollover-period="1W"/>

<!-- war 文件的布置目录 -->
<web-app-deploy path="webapps"/>

<!-- ear文件的布置目录 -->
<ear-deploy path="deploy">
<ear-default>
<ejb-server>
<config-directory>WEB-INF</config-directory>
<data-source>jdbc/test</data-source>
</ejb-server>
</ear-default>
</ear-deploy>

<!-- rar文件的布置目录 -->
<resource-deploy path="deploy"/>
</host-default>


<!-- 虚拟主机的布置目录 -->
<host-deploy path="hosts">
<host-default>
<resin:import path="host.xml" optional="true"/>
</host-default>
</host-deploy>

<!-- 默认的虚拟主机配置 -->
<host id="" root-directory=".">
<!-- 配置默认的应用 webapp's ROOT -->
<web-app id="/" root-directory="webapps/ROOT"/>
<!-- 你的虚拟目录 -->
<web-app id="/justoneweb" root-directory="D:\work\justoneweb\java\web"/>
<web-app id="/resin-admin" root-directory="${resin.home}/php/admin">
<!-- - 管理应用程序 /resin-admin
- password is the md5 hash of the password。md5码的密码。
- localhost is true to limit access to the localhost。localhost设置成true,这样只有localhost才能访问
-->
<prologue>
<resin:set var="resin_admin_user" value=""/>
<resin:set var="resin_admin_password" value=""/>
<resin:set var="resin_admin_external" value="false"/>
</prologue>
</web-app>
</host>
<host id="woke.tool.com" >
    <web-app id="/" root-directory="E:\resin-3.1.6\deploy\WokeTool1.0" />
  </host>
</cluster>


<!-- - Configuration for the web-tier/load-balancer -->
<resin:if test="${resin.isProfessional()}">
<cluster id="web-tier">
<server-default>
<!-- The http port -->
<http address="*" port="9080"/>
</server-default>
<server id="web-a" address="127.0.0.1" port="6700"/>
<cache path="cache" memory-size="64M"/>
<host id="">
<web-app id="/">
<rewrite-dispatch>
<load-balance regexp="" cluster="app-tier"/>
</rewrite-dispatch>
</web-app>
</host>
</cluster>
</resin:if>
</resin>




