//* 插入排序 */
//* 1. 从当前元素起，外层循环下标为0，内层循环下标为 外层循环下标（i）,*/
//* 2. 比较下标[j-1]是否大于下标[j],是则交换其值。
//* 3. 对所有元素均重复以上步骤，直至最后一个元素 */
package main
import "fmt"
func insertionsort() {
	arr := [...]int{21, 9, -18, 196 , 88, 68, 1}
	length := len(arr)
	fmt.Printf("原始数组: %v \n",arr)
	for i := 0 ; i < length; i++ {
        // 先假设每次循环时，将 j 次循环的值按从小到大依次排列，如 if 条件是 > 则为升序，< 则为降序。
		for j := i; j > 0; j-- {
			if (arr[j-1] > arr[j]) {
				  temp := arr[j]
		          arr[j] = arr[j-1]
		          arr[j-1] = temp 
			}
		}
        fmt.Printf("第 %d 次循环: %v\n",i+1,arr)
	}
	fmt.Printf("插入排序: %v",arr)
}

func main(){
  insertionsort()
}


// 原始数组: [21 9 -18 196 88 68 1] 
// 第 1 次循环: [21 9 -18 196 88 68 1]
// 第 2 次循环: [9 21 -18 196 88 68 1]
// 第 3 次循环: [-18 9 21 196 88 68 1]
// 第 4 次循环: [-18 9 21 196 88 68 1]
// 第 5 次循环: [-18 9 21 88 196 68 1]
// 第 6 次循环: [-18 9 21 68 88 196 1]
// 第 7 次循环: [-18 1 9 21 68 88 196]
// 插入排序: [-18 1 9 21 68 88 196]